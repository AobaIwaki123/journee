name: deploy
run-name: Deploy Journee

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag (e.g. latest, dev, v1.0.0)"
        required: true
        default: test
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

env:
  GCR_REGISTRY: gcr.io
  PROJECT_ID: my-docker-471807
  IMAGE_NAME: journee
  DEPLOYMENT_FILE_PATH: k8s/manifests/deployment.yml

defaults:
  run:
    shell: bash

jobs:
  determine-image-tag:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # タグ取得のため必須

      - name: Determine Docker image tag
        id: set-tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "image_tag=${{ github.event.inputs.image_tag }}" >> "$GITHUB_OUTPUT"
          else
            latest_tag=$(git tag | sort -V | tail -n 1)
            echo "Using latest tag: $latest_tag"
            echo "image_tag=$latest_tag" >> "$GITHUB_OUTPUT"
          fi

  docker-build-and-push-to-gcr:
    runs-on: ubuntu-latest
    needs:
      - determine-image-tag
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GCR_REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and Push Docker image to GCR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ needs.determine-image-tag.outputs.image_tag }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}

  update-deployment-manifest:
    runs-on: ubuntu-latest
    needs:
      - determine-image-tag
      - docker-build-and-push-to-gcr
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Update deployment YAML with new image tag
        uses: mikefarah/yq@v4
        with:
          cmd: yq -i '.spec.template.spec.containers[0].image = "${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ needs.determine-image-tag.outputs.image_tag }}"' "${{ env.DEPLOYMENT_FILE_PATH }}"

      - name: Check updated deployment file
        run: |
          echo "Updated image in ${{ env.DEPLOYMENT_FILE_PATH }}"

      - name: Commit and push deployment update
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update version to ${{ needs.determine-image-tag.outputs.image_tag }}"
          git push

  sync:
    runs-on: ubuntu-latest
    needs:
      - update-deployment-manifest
    steps:
      - name: Trigger ArgoCD sync via API
        env:
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          curl -X POST https://argocd.aooba.net/api/v1/applications/${{ env.IMAGE_NAME }}/sync \
            -H "Authorization: Bearer $ARGOCD_TOKEN" \
            -H "Content-Type: application/json"

  comment-on-discord:
    runs-on: ubuntu-latest
    needs:
      - sync
    steps:
    - name: Notify Discord
      run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{
            "content": "本番環境へのデプロイが完了しました! https://journee.aooba.net/"
          }' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}
