name: Create ArgoCD Application
run-name: Create ArgoCD Application for ${{ github.ref_name }}

on:
  workflow_call:
    inputs:
      branch:
        description: "Branch name"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

env:
  ARGOCD_SERVER: argocd.aooba.net
  IMAGE_NAME: journee

jobs:
  check-and-create-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Generate branch hash
        id: branch_hash
        run: |
          BRANCH="${{ inputs.branch }}"
          # Generate 6-character hash from branch name
          BRANCH_HASH=$(echo -n "$BRANCH" | md5sum | cut -c1-6)
          echo "hash=$BRANCH_HASH" >> $GITHUB_OUTPUT
          echo "✅ Generated hash for branch '$BRANCH': $BRANCH_HASH"

      - name: Check if ArgoCD Application exists
        id: check_app
        env:
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"
          APP_NAME="${{ env.IMAGE_NAME }}-$BRANCH_HASH"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $ARGOCD_TOKEN" \
            https://${{ env.ARGOCD_SERVER }}/api/v1/applications/$APP_NAME)

          echo "HTTP_CODE=$HTTP_CODE"

          if [ "$HTTP_CODE" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ ArgoCD Application '$APP_NAME' already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ ArgoCD Application '$APP_NAME' does not exist"
          fi

      - name: Install yq
        if: steps.check_app.outputs.exists == 'false'
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Create manifests directory for branch
        if: steps.check_app.outputs.exists == 'false'
        run: |
          BRANCH="${{ inputs.branch }}"
          BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"
          echo "📁 Creating manifests directory for branch: $BRANCH (hash: $BRANCH_HASH)"

          # Create manifests directory if it doesn't exist
          if [ ! -d "k8s/manifests-$BRANCH_HASH" ]; then
            cp -r k8s/manifests k8s/manifests-$BRANCH_HASH
            echo "✅ Created k8s/manifests-$BRANCH_HASH"
          else
            echo "ℹ️  Directory k8s/manifests-$BRANCH_HASH already exists"
          fi

          # Create argocd directory if it doesn't exist
          if [ ! -d "k8s/argocd-$BRANCH_HASH" ]; then
            mkdir -p k8s/argocd-$BRANCH_HASH
            echo "✅ Created k8s/argocd-$BRANCH_HASH"
          else
            echo "ℹ️  Directory k8s/argocd-$BRANCH_HASH already exists"
          fi

      - name: Update resource names in manifests
        if: steps.check_app.outputs.exists == 'false'
        run: |
          BRANCH="${{ inputs.branch }}"
          BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"
          MANIFEST_DIR="k8s/manifests-$BRANCH_HASH"

          echo "🔧 Updating resource names in manifests to include branch hash suffix"

          # Update Deployment name
          if [ -f "$MANIFEST_DIR/deployment.yml" ]; then
            yq -i '.metadata.name = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'"' "$MANIFEST_DIR/deployment.yml"
            echo "✅ Updated Deployment name in deployment.yml"
          fi

          # Update Service name and selector
          if [ -f "$MANIFEST_DIR/service.yml" ]; then
            yq -i '.metadata.name = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'"' "$MANIFEST_DIR/service.yml"
            yq -i '.spec.selector.app = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'"' "$MANIFEST_DIR/service.yml"
            echo "✅ Updated Service name in service.yml"
          fi

          # Update Ingress name and backend service name
          if [ -f "$MANIFEST_DIR/ingress.yml" ]; then
            yq -i '.metadata.name = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'"' "$MANIFEST_DIR/ingress.yml"
            yq -i '.spec.rules[0].http.paths[0].backend.service.name = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'"' "$MANIFEST_DIR/ingress.yml"
            # Update host to use 6-character hash
            yq -i '.spec.rules[0].host = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'.aooba.net"' "$MANIFEST_DIR/ingress.yml"
            echo "✅ Updated Ingress name and host in ingress.yml (using hash: $BRANCH_HASH)"
          fi

          # Update Deployment labels and selectors
          if [ -f "$MANIFEST_DIR/deployment.yml" ]; then
            yq -i '.metadata.labels.app = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'"' "$MANIFEST_DIR/deployment.yml"
            yq -i '.spec.selector.matchLabels.app = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'"' "$MANIFEST_DIR/deployment.yml"
            yq -i '.spec.template.metadata.labels.app = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'"' "$MANIFEST_DIR/deployment.yml"
            echo "✅ Updated Deployment labels and selectors"
          fi

          # Update container name
          if [ -f "$MANIFEST_DIR/deployment.yml" ]; then
            yq -i '.spec.template.spec.containers[0].name = "${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'"' "$MANIFEST_DIR/deployment.yml"
            echo "✅ Updated container name in deployment.yml"
          fi

          # Add ENABLE_MOCK_AUTH environment variable
          if [ -f "$MANIFEST_DIR/deployment.yml" ]; then
            # Check if ENABLE_MOCK_AUTH already exists
            ENABLE_MOCK_AUTH_EXISTS=$(yq '.spec.template.spec.containers[0].env[] | select(.name == "ENABLE_MOCK_AUTH")' "$MANIFEST_DIR/deployment.yml")
            if [ -z "$ENABLE_MOCK_AUTH_EXISTS" ]; then
              # Find the index after NEXTAUTH_URL to insert the new env var
              yq -i '.spec.template.spec.containers[0].env += [{"name": "ENABLE_MOCK_AUTH", "value": "true"}]' "$MANIFEST_DIR/deployment.yml"
              echo "✅ Added ENABLE_MOCK_AUTH=true environment variable"
            else
              # Update existing value
              yq -i '(.spec.template.spec.containers[0].env[] | select(.name == "ENABLE_MOCK_AUTH") | .value) = "true"' "$MANIFEST_DIR/deployment.yml"
              echo "✅ Updated ENABLE_MOCK_AUTH=true environment variable"
            fi
          fi

          # Update NEXT_PUBLIC_BASE_URL to branch-specific URL with hash
          if [ -f "$MANIFEST_DIR/deployment.yml" ]; then
            BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"
            yq -i '(.spec.template.spec.containers[0].env[] | select(.name == "NEXT_PUBLIC_BASE_URL") | .value) = "https://${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'.aooba.net"' "$MANIFEST_DIR/deployment.yml"
            yq -i '(.spec.template.spec.containers[0].env[] | select(.name == "NEXTAUTH_URL") | .value) = "https://${{ env.IMAGE_NAME }}-'"$BRANCH_HASH"'.aooba.net"' "$MANIFEST_DIR/deployment.yml"
            echo "✅ Updated NEXT_PUBLIC_BASE_URL and NEXTAUTH_URL to branch-specific URL (using hash: $BRANCH_HASH)"
          fi

          echo "✅ All resource names and configurations updated successfully"

      - name: Generate ArgoCD Application manifest
        if: steps.check_app.outputs.exists == 'false'
        run: |
          BRANCH="${{ inputs.branch }}"
          BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"
          APP_NAME="${{ env.IMAGE_NAME }}-$BRANCH_HASH"

          cat > k8s/argocd-$BRANCH_HASH/app.yml << EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: $APP_NAME
          spec:
            project: default
            source:
              repoURL: 'https://github.com/${{ github.repository }}'
              targetRevision: $BRANCH
              path: k8s/manifests-$BRANCH_HASH
            destination:
              server: 'https://kubernetes.default.svc'
              namespace: journee
            syncPolicy:
              automated:
                selfHeal: true
                prune: true
          EOF

          echo "✅ Generated ArgoCD Application manifest for $APP_NAME (branch: $BRANCH)"
          cat k8s/argocd-$BRANCH_HASH/app.yml

      - name: Commit and push manifests
        if: steps.check_app.outputs.exists == 'false'
        run: |
          BRANCH="${{ inputs.branch }}"
          BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add k8s/manifests-$BRANCH_HASH k8s/argocd-$BRANCH_HASH

          if git diff --staged --quiet; then
            echo "ℹ️  No changes to commit"
          else
            git commit -m "🚀 Create ArgoCD manifests for branch: $BRANCH (hash: $BRANCH_HASH)"
            git push
            echo "✅ Committed and pushed manifests"
          fi

      - name: Create ArgoCD Application
        if: steps.check_app.outputs.exists == 'false'
        env:
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          BRANCH="${{ inputs.branch }}"
          BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"
          APP_NAME="${{ env.IMAGE_NAME }}-$BRANCH_HASH"

          echo "🚀 Creating ArgoCD Application: $APP_NAME (branch: $BRANCH)"

          curl -X POST https://${{ env.ARGOCD_SERVER }}/api/v1/applications \
            -H "Authorization: Bearer $ARGOCD_TOKEN" \
            -H "Content-Type: application/json" \
            -d @- << EOF
          {
            "metadata": {
              "name": "$APP_NAME"
            },
            "spec": {
              "project": "default",
              "source": {
                "repoURL": "https://github.com/${{ github.repository }}",
                "targetRevision": "$BRANCH",
                "path": "k8s/manifests-$BRANCH_HASH"
              },
              "destination": {
                "server": "https://kubernetes.default.svc",
                "namespace": "journee"
              },
              "syncPolicy": {
                "automated": {
                  "selfHeal": true,
                  "prune": true
                }
              }
            }
          }
          EOF

          echo ""
          echo "✅ ArgoCD Application '$APP_NAME' created successfully"

      - name: Skip creation
        if: steps.check_app.outputs.exists == 'true'
        run: |
          BRANCH="${{ inputs.branch }}"
          BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"
          APP_NAME="${{ env.IMAGE_NAME }}-$BRANCH_HASH"
          echo "ℹ️  ArgoCD Application '$APP_NAME' (branch: $BRANCH) already exists. Skipping creation."

      - name: Find associated PR
        id: find_pr
        if: steps.check_app.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH="${{ inputs.branch }}"
          PR_NUMBER=$(gh pr list --head "$BRANCH" --json number --jq '.[0].number')

          if [ -n "$PR_NUMBER" ]; then
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "✅ Found PR #$PR_NUMBER for branch '$BRANCH'"
          else
            echo "pr_number=" >> $GITHUB_OUTPUT
            echo "ℹ️  No PR found for branch '$BRANCH'"
          fi

      - name: Create PR if not exists
        id: create_pr
        if: steps.check_app.outputs.exists == 'false' && steps.find_pr.outputs.pr_number == ''
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH="${{ inputs.branch }}"
          BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"

          echo "🔧 Creating PR for branch '$BRANCH'"

          # Create PR with title and body
          PR_URL=$(gh pr create \
            --title "🚀 Deploy: $BRANCH" \
            --body "## Auto-generated PR for branch deployment
          
          **Branch:** \`$BRANCH\`
          **Hash:** \`$BRANCH_HASH\`
          
          This PR was automatically created for preview deployment.
          
          Preview URL will be posted as a comment once the deployment is complete." \
            --base main \
            --head "$BRANCH")

          # Extract PR number from URL
          PR_NUMBER=$(echo "$PR_URL" | sed 's|.*/pull/||')

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "✅ Created PR #$PR_NUMBER for branch '$BRANCH'"

      - name: Comment deployment URL on PR
        if: steps.check_app.outputs.exists == 'false' && (steps.find_pr.outputs.pr_number != '' || steps.create_pr.outputs.pr_number != '')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH="${{ inputs.branch }}"
          BRANCH_HASH="${{ steps.branch_hash.outputs.hash }}"
          # Use PR number from either find_pr or create_pr step
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number || steps.create_pr.outputs.pr_number }}"
          DEPLOYMENT_URL="https://${{ env.IMAGE_NAME }}-$BRANCH_HASH.aooba.net"

          gh pr comment "$PR_NUMBER" --body "🚀 **Preview Deployment Created**

          **Branch:** \`$BRANCH\`
          **Hash:** \`$BRANCH_HASH\`
          **URL:** $DEPLOYMENT_URL

          The preview environment will be available shortly after the deployment completes."
                    
                    echo "✅ Posted deployment URL to PR #$PR_NUMBER"
