name: push
run-name: Push Branch Image to GCR

on:
  push:
    branches-ignore:
      - main
    # paths:
    #   - "app/**"
    #   - "components/**"
    #   - "lib/**"
    #   - "types/**"
    #   - "public/**"
    #   - "middleware.ts"
    #   - "package.json"
    #   - "package-lock.json"
    #   - "next.config.js"
    #   - "tailwind.config.ts"
    #   - "tsconfig.json"
    #   - "postcss.config.js"
    #   - "Dockerfile.prod"
    # テスト

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

env:
  GCR_REGISTRY: gcr.io
  PROJECT_ID: my-docker-471807
  IMAGE_NAME: journee

jobs:
  create-argo-app:
    uses: ./.github/workflows/create-argo-app.yml
    secrets: inherit
    with:
      branch: ${{ github.ref_name }}

  push:
    needs:
      - create-argo-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set short SHA
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-6)" >> $GITHUB_ENV

      - name: Generate branch hash
        run: |
          BRANCH="${{ github.ref_name }}"
          BRANCH_HASH=$(echo -n "$BRANCH" | md5sum | cut -c1-6)
          echo "BRANCH_HASH=$BRANCH_HASH" >> $GITHUB_ENV
          echo "✅ Generated hash for branch '$BRANCH': $BRANCH_HASH"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GCR_REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Push image to GCR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_HASH }}-${{ env.SHORT_SHA }}
          cache-from: type=gha # 以前のビルドで作成したレイヤーをどこから取得するか
          cache-to: type=gha,mode=max # すべてのビルドレイヤーをキャッシュに保存,mode=minは最終レイヤーのみ
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_ENABLE_MOCK_AUTH=true

  update-deployment-manifest:
    runs-on: ubuntu-latest
    needs:
      - push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Pull latest changes
        run: |
          git pull origin ${{ github.ref_name }}

      - name: Set short SHA
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-6)" >> $GITHUB_ENV

      - name: Generate branch hash
        run: |
          BRANCH="${{ github.ref_name }}"
          BRANCH_HASH=$(echo -n "$BRANCH" | md5sum | cut -c1-6)
          echo "BRANCH_HASH=$BRANCH_HASH" >> $GITHUB_ENV
          echo "✅ Generated hash for branch '$BRANCH': $BRANCH_HASH"

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Check manifest directory
        run: |
          echo "Checking for manifests directory..."
          ls -la k8s/
          echo "Looking for manifests-${{ env.BRANCH_HASH }}"
          if [ -d "k8s/manifests-${{ env.BRANCH_HASH }}" ]; then
            echo "✅ Directory exists"
            ls -la "k8s/manifests-${{ env.BRANCH_HASH }}/"
          else
            echo "❌ Directory does not exist"
            exit 1
          fi

      - name: Update deployment manifest
        run: |
          MANIFEST_PATH="k8s/manifests-${{ env.BRANCH_HASH }}/deployment.yml"
          echo "Updating manifest at: $MANIFEST_PATH"

          if [ ! -f "$MANIFEST_PATH" ]; then
            echo "❌ Manifest file not found: $MANIFEST_PATH"
            exit 1
          fi

          yq -i '.spec.template.spec.containers[0].image = "${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_HASH }}-${{ env.SHORT_SHA }}"' "$MANIFEST_PATH"
          echo "✅ Manifest updated successfully"

      - name: Commit and push deployment manifest
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update deployment manifest"
          git push

  sync:
    runs-on: ubuntu-latest
    needs:
      - update-deployment-manifest
    steps:
      - name: Generate branch hash
        run: |
          BRANCH="${{ github.ref_name }}"
          BRANCH_HASH=$(echo -n "$BRANCH" | md5sum | cut -c1-6)
          echo "BRANCH_HASH=$BRANCH_HASH" >> $GITHUB_ENV
          echo "✅ Generated hash for branch '$BRANCH': $BRANCH_HASH"

      - name: Trigger ArgoCD sync via API
        env:
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          curl -X POST https://argocd.aooba.net/api/v1/applications/${{ env.IMAGE_NAME }}-${{ env.BRANCH_HASH }}/sync \
            -H "Authorization: Bearer $ARGOCD_TOKEN" \
            -H "Content-Type: application/json"
