---
alwaysApply: true
---

# Journee プロジェクト構造

## プロジェクト概要
AIとともに旅のしおりを作成するWebアプリケーション。チャット形式で旅行計画を立て、リアルタイムでしおりを生成します。

## 技術スタック
- **フレームワーク**: Next.js 14+ (App Router)
- **言語**: TypeScript
- **スタイリング**: Tailwind CSS
- **状態管理**: Zustand
- **UI**: lucide-react (アイコン)
- **開発環境**: Docker

## ディレクトリ構造

### `/app` - Next.js App Router
- [app/page.tsx](mdc:app/page.tsx) - メインページ（チャット40% / しおり60%のレイアウト）
- [app/layout.tsx](mdc:app/layout.tsx) - ルートレイアウト
- [app/globals.css](mdc:app/globals.css) - グローバルスタイル
- `/app/api` - APIルート（Phase 2以降で実装）

### `/components` - Reactコンポーネント
- `/chat` - チャット機能
  - [ChatBox.tsx](mdc:components/chat/ChatBox.tsx) - チャットコンテナ
  - [MessageList.tsx](mdc:components/chat/MessageList.tsx) - メッセージ一覧
  - [MessageInput.tsx](mdc:components/chat/MessageInput.tsx) - メッセージ入力
  - [AISelector.tsx](mdc:components/chat/AISelector.tsx) - AIモデル選択
- `/itinerary` - しおり機能
  - [ItineraryPreview.tsx](mdc:components/itinerary/ItineraryPreview.tsx) - しおりプレビュー
  - [DaySchedule.tsx](mdc:components/itinerary/DaySchedule.tsx) - 日程表示
  - [SpotCard.tsx](mdc:components/itinerary/SpotCard.tsx) - 観光スポットカード
- `/layout` - レイアウト
  - [Header.tsx](mdc:components/layout/Header.tsx) - ヘッダーナビゲーション

### `/lib` - ユーティリティ・ロジック
- `/store` - Zustand状態管理
  - [useStore.ts](mdc:lib/store/useStore.ts) - グローバルストア
- `/ai` - AI統合（Phase 3で実装予定）
- `/auth` - 認証（Phase 2で実装予定）

### `/types` - TypeScript型定義
- [chat.ts](mdc:types/chat.ts) - チャット関連の型
- [itinerary.ts](mdc:types/itinerary.ts) - しおり関連の型

### `/public` - 静的ファイル
- `/images` - 画像・アイコン

## 開発フェーズ
- ✅ **Phase 1（完了）**: 基礎構築（レイアウト、チャットUI、状態管理）
- 🔄 **Phase 2（次）**: 認証機能（NextAuth.js + Google OAuth）
- 📋 **Phase 3**: AI統合（Gemini API）
- 📋 **Phase 4-11**: その他機能（詳細は[README.md](mdc:README.md)参照）

## 重要なファイル
- [package.json](mdc:package.json) - 依存関係・npm scripts
- [tsconfig.json](mdc:tsconfig.json) - TypeScript設定
- [tailwind.config.ts](mdc:tailwind.config.ts) - Tailwind CSS設定
- [README.md](mdc:README.md) - プロジェクト全体の詳細
- [PHASE1_SUMMARY.md](mdc:PHASE1_SUMMARY.md) - Phase 1完了サマリー

## 状態管理（Zustand）
- チャット状態: `messages`, `isLoading`
- しおり状態: `currentItinerary`
- UI状態: `selectedAI`（gemini / claude）

全てのコンポーネントから `useStore()` でアクセス可能。

## コンポーネント設計原則
1. **Client Components**: 'use client'ディレクティブ必須（インタラクティブなUI）
2. **ファイル命名**: PascalCase（例: ChatBox.tsx）
3. **export**: named export（例: `export const ChatBox: React.FC = () => {}`）
4. **型安全性**: すべてのpropsとstateに型定義
5. **再利用性**: 単一責任の原則に従う

## Docker環境
- `npm run docker:start` - 開発サーバー起動
- `npm run docker:stop` - 停止
- `npm run docker:logs` - ログ確認
- 詳細は[DOCKER.md](mdc:DOCKER.md)参照
