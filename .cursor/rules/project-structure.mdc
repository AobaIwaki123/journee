---
alwaysApply: true
---

# Journee プロジェクト構造

## プロジェクト概要
AIとともに旅のしおりを作成するWebアプリケーション。チャット形式で旅行計画を立て、リアルタイムでしおりを生成します。

## 技術スタック
- **フレームワーク**: Next.js 14+ (App Router)
- **言語**: TypeScript
- **スタイリング**: Tailwind CSS
- **状態管理**: Zustand
- **認証**: NextAuth.js (Google OAuth)
- **UI**: lucide-react (アイコン)
- **開発環境**: Docker

## ディレクトリ構造

### `/app` - Next.js App Router
- [app/page.tsx](mdc:app/page.tsx) - メインページ（認証保護、チャット40% / しおり60%）
- [app/layout.tsx](mdc:app/layout.tsx) - ルートレイアウト（AuthProvider統合済み）
- [app/globals.css](mdc:app/globals.css) - グローバルスタイル
- `/app/login` - ログインページ
  - [page.tsx](mdc:app/login/page.tsx) - Googleログイン画面
- `/app/privacy` - プライバシーポリシー（Phase 2実装済み）
- `/app/terms` - 利用規約（Phase 2実装済み）
- `/app/api` - APIルート
  - `/auth/[...nextauth]` - NextAuth.js認証エンドポイント
    - [route.ts](mdc:app/api/auth/[...nextauth]/route.ts) - 認証API
  - `/health` - ヘルスチェック
    - [route.ts](mdc:app/api/health/route.ts) - サービス稼働状況確認
  - `/user/me` - ユーザー情報
    - [route.ts](mdc:app/api/user/me/route.ts) - 現在のユーザー取得（認証必須）

### `/components` - Reactコンポーネント
- `/auth` - 認証コンポーネント（Phase 2実装済み）
  - [AuthProvider.tsx](mdc:components/auth/AuthProvider.tsx) - NextAuthセッションプロバイダー
  - [LoginButton.tsx](mdc:components/auth/LoginButton.tsx) - Googleログインボタン
  - [UserMenu.tsx](mdc:components/auth/UserMenu.tsx) - ユーザーメニュー（ドロップダウン）
- `/chat` - チャット機能
  - [ChatBox.tsx](mdc:components/chat/ChatBox.tsx) - チャットコンテナ
  - [MessageList.tsx](mdc:components/chat/MessageList.tsx) - メッセージ一覧
  - [MessageInput.tsx](mdc:components/chat/MessageInput.tsx) - メッセージ入力
  - [AISelector.tsx](mdc:components/chat/AISelector.tsx) - AIモデル選択
- `/itinerary` - しおり機能
  - [ItineraryPreview.tsx](mdc:components/itinerary/ItineraryPreview.tsx) - しおりプレビュー
  - [DaySchedule.tsx](mdc:components/itinerary/DaySchedule.tsx) - 日程表示
  - [SpotCard.tsx](mdc:components/itinerary/SpotCard.tsx) - 観光スポットカード
- `/layout` - レイアウト
  - [Header.tsx](mdc:components/layout/Header.tsx) - ヘッダーナビゲーション（認証機能統合済み）
- `/ui` - 共通UIコンポーネント
  - [LoadingSpinner.tsx](mdc:components/ui/LoadingSpinner.tsx) - ローディングスピナー

### `/lib` - ユーティリティ・ロジック
- `/auth` - 認証ロジック（Phase 2実装済み）
  - [auth-options.ts](mdc:lib/auth/auth-options.ts) - NextAuth設定（Google OAuth, JWT戦略）
  - [session.ts](mdc:lib/auth/session.ts) - セッション管理ヘルパー（getSession, getCurrentUser）
  - [README.md](mdc:lib/auth/README.md) - 認証機能ドキュメント
- `/store` - Zustand状態管理
  - [useStore.ts](mdc:lib/store/useStore.ts) - グローバルストア
- `/ai` - AI統合（Phase 3で実装予定）

### `/types` - TypeScript型定義
- [chat.ts](mdc:types/chat.ts) - チャット関連の型
- [itinerary.ts](mdc:types/itinerary.ts) - しおり関連の型
- [auth.ts](mdc:types/auth.ts) - 認証関連の型（NextAuth拡張型定義）
- [api.ts](mdc:types/api.ts) - API共通型定義（レスポンス、エラー）

### `/public` - 静的ファイル
- `/images` - 画像・アイコン

### `/docs` - ドキュメント
- [API.md](mdc:docs/API.md) - API仕様書
- [PHASE2_IMPLEMENTATION.md](mdc:docs/PHASE2_IMPLEMENTATION.md) - Phase 2実装レポート
- [INTEGRATION_COMPLETE.md](mdc:docs/INTEGRATION_COMPLETE.md) - Phase 1 & 2統合レポート
- [PHASE2_TESTING_GUIDE.md](mdc:docs/PHASE2_TESTING_GUIDE.md) - テストガイド

### その他
- [middleware.ts](mdc:middleware.ts) - 認証ミドルウェア（保護されたルート自動チェック）

## 開発フェーズ
- ✅ **Phase 1（完了）**: 基礎構築（レイアウト、チャットUI、状態管理）
- ✅ **Phase 2（完了）**: 認証機能（NextAuth.js + Google OAuth）
- 🔄 **Phase 3（次）**: AI統合（Gemini API）
- 📋 **Phase 4-11**: その他機能（詳細は[README.md](mdc:README.md)参照）

## 認証システム（Phase 2実装済み）
### アーキテクチャ
- **認証戦略**: JWT（JSON Web Token）
- **プロバイダー**: Google OAuth 2.0
- **セッション期限**: 30日間
- **保存**: HTTPOnly Cookie（XSS対策）

### 認証フロー
1. ユーザーが `/api/auth/signin` にアクセス
2. Google OAuth画面にリダイレクト
3. 認証成功後、JWTトークンを生成してCookieに保存
4. ホームページにリダイレクト

### セッション管理ヘルパー
```typescript
import { getCurrentUser } from '@/lib/auth/session'

// Server Component / Route Handler
const user = await getCurrentUser()
if (!user) {
  return new Response('Unauthorized', { status: 401 })
}
```

### 認証保護
- **ミドルウェア**: `/api/*`（一部除外）、メインページは自動認証チェック
- **未認証時**: 自動的に `/login` にリダイレクト

### 認証API
| エンドポイント | 説明 | 認証 |
|------------|------|------|
| `GET /api/auth/signin` | サインインページ | 不要 |
| `GET /api/auth/signout` | サインアウト | 必要 |
| `GET /api/auth/session` | セッション情報取得 | 不要 |
| `GET /api/user/me` | ユーザー情報取得 | 必要 |
| `GET /api/health` | ヘルスチェック | 不要 |

詳細は [docs/API.md](mdc:docs/API.md) と [lib/auth/README.md](mdc:lib/auth/README.md) 参照。

## 重要なファイル
- [package.json](mdc:package.json) - 依存関係・npm scripts
- [tsconfig.json](mdc:tsconfig.json) - TypeScript設定
- [tailwind.config.ts](mdc:tailwind.config.ts) - Tailwind CSS設定
- [README.md](mdc:README.md) - プロジェクト全体の詳細
- [PHASE1_SUMMARY.md](mdc:PHASE1_SUMMARY.md) - Phase 1完了サマリー
- [docs/INTEGRATION_COMPLETE.md](mdc:docs/INTEGRATION_COMPLETE.md) - Phase 1 & 2統合レポート

## 状態管理（Zustand）
- チャット状態: `messages`, `isLoading`
- しおり状態: `currentItinerary`
- UI状態: `selectedAI`（gemini / claude）

全てのコンポーネントから `useStore()` でアクセス可能。

## コンポーネント設計原則
1. **Client Components**: 'use client'ディレクティブ必須（インタラクティブなUI）
2. **Server Components**: 認証チェックなどサーバーサイド処理が必要な場合
3. **ファイル命名**: PascalCase（例: ChatBox.tsx）
4. **export**: named export（例: `export const ChatBox: React.FC = () => {}`）
5. **型安全性**: すべてのpropsとstateに型定義
6. **再利用性**: 単一責任の原則に従う

## Docker環境
- `npm run docker:start` - 開発サーバー起動
- `npm run docker:stop` - 停止
- `npm run docker:logs` - ログ確認
- 詳細は[DOCKER.md](mdc:DOCKER.md)参照

## 環境変数（`.env.local`）
```env
# 認証（Phase 2）
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your_secret_here
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# AI統合（Phase 3で追加予定）
GEMINI_API_KEY=your_gemini_api_key
```

`.env.example` を参照して設定。
