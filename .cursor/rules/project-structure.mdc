---
alwaysApply: true
description: "Basic project structure and organization rules"
---
# Journee プロジェクト構造

## プロジェクト概要
AIとともに旅のしおりを作成するWebアプリケーション。チャット形式で旅行計画を立て、リアルタイムでしおりを生成します。

## 技術スタック
- **フレームワーク**: Next.js 14+ (App Router)
- **言語**: TypeScript
- **スタイリング**: Tailwind CSS
- **状態管理**: Zustand
- **認証**: NextAuth.js (Google OAuth)
- **UI**: lucide-react (アイコン)
- **開発環境**: Docker

## ディレクトリ構造

### `/app` - Next.js App Router
- [app/page.tsx](mdc:app/page.tsx) - メインページ（認証保護、チャット40% / しおり60%）
- [app/layout.tsx](mdc:app/layout.tsx) - ルートレイアウト（AuthProvider統合済み）
- [app/globals.css](mdc:app/globals.css) - グローバルスタイル

### `/components` - Reactコンポーネント
- `/auth` - 認証コンポーネント
- `/chat` - チャット機能
- `/itinerary` - しおり機能
- `/layout` - レイアウト
- `/settings` - 設定コンポーネント
- `/ui` - 共通UIコンポーネント

### `/lib` - ユーティリティ・ロジック
- `/auth` - 認証ロジック
- `/store` - Zustand状態管理
- `/ai` - AI統合
- `/utils` - ユーティリティ関数

### `/types` - TypeScript型定義
- [types/chat.ts](mdc:types/chat.ts) - チャット関連の型
- [types/itinerary.ts](mdc:types/itinerary.ts) - しおり関連の型
- [types/auth.ts](mdc:types/auth.ts) - 認証関連の型

## コーディング規約

1. **型安全性**
   - 全ての新規コードでTypeScriptの厳格モードを使用
   - Union型を活用したフェーズと状態の管理
   - 型ガードによる安全な型チェック

2. **コンポーネント設計**
   - Atomic Designパターンの適用
   - Props型の明示的な定義
   - メモ化による不要な再レンダリングの防止

3. **状態管理**
   - Zustandストアの適切な分割
   - 副作用の制御（useEffect）
   - 非同期処理の適切な処理
