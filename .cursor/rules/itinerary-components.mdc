---
globs: "components/itinerary/**/*,types/itinerary.ts,lib/mock-data/**/*"
---

# しおりコンポーネント実装パターン（Phase 5.1）

## 概要
Phase 5.1で実装した7つのコンポーネントを使用したしおり機能の実装パターンと設計原則。

## コンポーネント一覧

### 1. ItineraryHeader - タイトル・サマリー
**ファイル**: [ItineraryHeader.tsx](mdc:components/itinerary/ItineraryHeader.tsx)

**役割**:
- しおりのタイトル、目的地、日程、予算を表示
- ステータスバッジ（作成中/完成/アーカイブ）
- 編集ボタンの統合

**使用パターン**:
```typescript
import { ItineraryHeader } from '@/components/itinerary/ItineraryHeader';

<ItineraryHeader
  itinerary={currentItinerary}
  onEdit={() => setIsEditing(true)}
  isEditing={isEditing}
/>
```

**デザイン原則**:
- グラデーション背景（`bg-gradient-to-br from-blue-600 to-purple-600`）
- 白テキストで視認性確保
- ステータスバッジは色分け（作成中=青、完成=緑、アーカイブ=グレー）

---

### 2. DaySchedule - 日程表示
**ファイル**: [DaySchedule.tsx](mdc:components/itinerary/DaySchedule.tsx)

**役割**:
- 日程の展開/折りたたみ
- 統計情報の表示（スポット数、滞在時間、カテゴリ数）
- タイトルのインライン編集
- スポット一覧の表示

**使用パターン**:
```typescript
import { DaySchedule } from '@/components/itinerary/DaySchedule';

<DaySchedule
  day={day}
  isEditing={isEditing}
  onDayUpdate={(updatedDay) => {
    // Zustandで状態更新
    updateItinerary({ schedule: [...updatedSchedule] });
  }}
/>
```

**実装原則**:
- ✅ 折りたたみ状態は各コンポーネント内で管理（`useState`）
- ✅ 編集内容は親コンポーネントに伝播（`onDayUpdate` コールバック）
- ✅ 統計情報は自動計算（スポット配列から算出）

---

### 3. SpotCard - 観光スポットカード
**ファイル**: [SpotCard.tsx](mdc:components/itinerary/SpotCard.tsx)

**役割**:
- スポット情報の詳細表示
- カテゴリアイコン（🏛️観光、🍽️食事、🚗移動、🏨宿泊）
- 画像表示（Next.js Image使用）
- Google Mapsリンク
- 編集ボタン（ホバー時表示）

**使用パターン**:
```typescript
import { SpotCard } from '@/components/itinerary/SpotCard';

<SpotCard
  spot={spot}
  isEditing={isEditing}
  onEdit={(updatedSpot) => {
    // スポット更新処理
  }}
/>
```

**カテゴリアイコンマッピング**:
```typescript
const categoryIcons = {
  sightseeing: '🏛️',
  dining: '🍽️',
  transportation: '🚗',
  accommodation: '🏨',
  other: '📍',
};
```

**デザイン原則**:
- ✅ ホバー時に編集ボタンを表示（`group-hover:opacity-100`）
- ✅ 画像は Next.js Image コンポーネントで最適化
- ✅ 長い説明文は「続きを読む」で展開
- ✅ Google Maps リンクは外部リンクアイコン（`ExternalLink`）付き

---

### 4. EditSpotModal - スポット編集モーダル
**ファイル**: [EditSpotModal.tsx](mdc:components/itinerary/EditSpotModal.tsx)

**役割**:
- すべてのスポットフィールドを編集
- バリデーション
- 保存/キャンセル操作

**使用パターン**:
```typescript
import { EditSpotModal } from '@/components/itinerary/EditSpotModal';

const [editingSpot, setEditingSpot] = useState<TouristSpot | null>(null);

<EditSpotModal
  spot={editingSpot}
  isOpen={!!editingSpot}
  onClose={() => setEditingSpot(null)}
  onSave={(updatedSpot) => {
    // Zustand更新処理
    setEditingSpot(null);
  }}
/>
```

**編集可能フィールド**:
- スポット名、カテゴリ、説明
- 予定時刻、滞在時間
- 住所、緯度経度
- 予算、画像URL、メモ

**バリデーション**:
- ✅ 必須項目: スポット名、カテゴリ
- ✅ 数値項目: 滞在時間（分）、予算、緯度経度

---

### 5. MapView - 地図表示
**ファイル**: [MapView.tsx](mdc:components/itinerary/MapView.tsx)

**役割**:
- Google Maps統合
- 番号付きマーカー表示
- 情報ウィンドウ
- ルート描画
- 日別フィルタ

**使用パターン**:
```typescript
import { MapView } from '@/components/itinerary/MapView';

<MapView
  days={currentItinerary.schedule}
  selectedDay={selectedDay} // undefined = 全日程
  height="600px"
/>
```

**環境変数**:
```env
NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=your_api_key
```

**⚠️ 重要な注意事項**:
- 地図機能は現時点で**基本実装のみ**で、洗練されていません
- UI/UX、パフォーマンス、エラーハンドリングに改善の余地あり
- **オプショナル機能**として扱い、将来的なブラッシュアップを推奨
- APIキーがない場合はフォールバックメッセージを表示

**実装の注意点**:
- ✅ スクリプトは一度だけ読み込む（`useEffect` + クリーンアップ）
- ✅ 位置情報がないスポットは無視
- ✅ マーカーは削除→再作成で更新
- ✅ ルートは Google Directions API 使用

---

### 6. ItineraryTemplates - テンプレート選択
**ファイル**: [ItineraryTemplates.tsx](mdc:components/itinerary/ItineraryTemplates.tsx)

**役割**:
- 5種類のテンプレート選択UI
- 選択状態の視覚化
- プロンプト生成関数

**テンプレート種類**:
1. **standard** (🗺️) - スタンダード
2. **photo** (📷) - フォトジェニック
3. **foodie** (🍽️) - グルメ旅
4. **adventure** (⛰️) - アドベンチャー
5. **culture** (✨) - 文化体験

**使用パターン**:
```typescript
import { ItineraryTemplates, getTemplatePrompt } from '@/components/itinerary/ItineraryTemplates';

const { selectedTemplate, setSelectedTemplate } = useStore();

<ItineraryTemplates
  currentTemplate={selectedTemplate}
  onSelect={setSelectedTemplate}
/>

// AIプロンプトに統合
const templatePrompt = getTemplatePrompt(selectedTemplate);
```

**型定義**:
```typescript
// types/itinerary.ts
export type ItineraryTemplate = 
  | "standard" 
  | "photo" 
  | "foodie" 
  | "adventure" 
  | "culture";

// ItineraryData に追加
interface ItineraryData {
  // ...
  template?: ItineraryTemplate;
}
```

**Zustand状態管理**:
```typescript
// lib/store/useStore.ts
selectedTemplate: ItineraryTemplate;
setSelectedTemplate: (template: ItineraryTemplate) => void;
```

---

### 7. ItineraryPreview - メインプレビュー
**ファイル**: [ItineraryPreview.tsx](mdc:components/itinerary/ItineraryPreview.tsx)

**役割**:
- ビューモード切り替え（スケジュール/地図）
- 各コンポーネントの統合
- Zustandとの連携

**使用パターン**:
```typescript
import { ItineraryPreview } from '@/components/itinerary/ItineraryPreview';

<ItineraryPreview />
```

**内部構造**:
```typescript
const [viewMode, setViewMode] = useState<'schedule' | 'map'>('schedule');
const [isEditing, setIsEditing] = useState(false);

// ヘッダー
<ItineraryHeader itinerary={currentItinerary} onEdit={...} />

// ビュー切り替えボタン
<button onClick={() => setViewMode('schedule')}>スケジュール</button>
<button onClick={() => setViewMode('map')}>地図</button>

// 表示モード
{viewMode === 'schedule' ? (
  <DaySchedule ... />
) : (
  <MapView ... />
)}
```

---

## データフロー

### 編集フロー
```
SpotCard（編集ボタンクリック）
  ↓
EditSpotModal（編集処理）
  ↓
DaySchedule（onDayUpdate経由）
  ↓
ItineraryPreview（updateItinerary呼び出し）
  ↓
Zustand（グローバル状態更新）
```

### AI更新フロー
```
AIチャット（レスポンス受信）
  ↓
parseAIResponse（JSON抽出）
  ↓
Zustand.setItinerary（状態更新）
  ↓
ItineraryPreview（自動再レンダリング）
```

---

## 型定義

### 主要な型
```typescript
// types/itinerary.ts
export interface ItineraryData {
  id: string;
  title: string;
  destination: string;
  startDate?: string;
  endDate?: string;
  duration?: number;
  summary?: string;
  schedule: DaySchedule[];
  totalBudget?: number;
  status: 'draft' | 'completed' | 'archived';
  template?: ItineraryTemplate;
  createdAt: Date;
  updatedAt: Date;
}

export interface DaySchedule {
  day: number;
  date?: string;
  title?: string;
  spots: TouristSpot[];
  totalDistance?: number;
  totalCost?: number;
}

export interface TouristSpot {
  id: string;
  name: string;
  description: string;
  location?: Location;
  scheduledTime?: string;
  duration?: number;
  category?: 'sightseeing' | 'dining' | 'transportation' | 'accommodation' | 'other';
  estimatedCost?: number;
  notes?: string;
  imageUrl?: string;
}

export interface Location {
  address: string;
  lat?: number;
  lng?: number;
}

export type ItineraryTemplate = 
  | "standard" 
  | "photo" 
  | "foodie" 
  | "adventure" 
  | "culture";
```

---

## モックデータ

### サンプルデータ
**ファイル**: [sample-itinerary.ts](mdc:lib/mock-data/sample-itinerary.ts)

**提供データ**:
1. **京都2泊3日** - 17スポット（位置情報・画像付き）
2. **東京グルメ旅2日間** - 5スポット

**使用パターン**:
```typescript
import { loadSampleItinerary } from '@/lib/mock-data/sample-itinerary';

// 京都データ読み込み
const kyotoData = loadSampleItinerary('kyoto');
setItinerary(kyotoData);

// 東京データ読み込み
const tokyoData = loadSampleItinerary('tokyo');
setItinerary(tokyoData);
```

**デバッグ用コンポーネント**:
[LoadSampleButton.tsx](mdc:components/debug/LoadSampleButton.tsx) - 開発モードで画面右下に表示

---

## デザインパターン

### グラデーション背景
```typescript
// 推奨パターン
className="bg-gradient-to-br from-blue-600 to-purple-600"
className="bg-gradient-to-r from-blue-50 to-purple-50"
```

### ホバーエフェクト
```typescript
// カード
className="transition-all hover:shadow-lg hover:border-blue-500"

// ボタン
className="group-hover:opacity-100 opacity-0"
```

### 折りたたみアニメーション
```typescript
// 展開状態の管理
const [isExpanded, setIsExpanded] = useState(true);

// 条件レンダリング
{isExpanded && (
  <div className="transition-all">
    {/* コンテンツ */}
  </div>
)}
```

---

## パフォーマンス最適化

### Next.js Image
```typescript
import Image from 'next/image';

<Image
  src={spot.imageUrl}
  alt={spot.name}
  width={400}
  height={300}
  className="object-cover rounded-lg"
  onError={() => setImageError(true)}
/>
```

### 遅延読み込み
```typescript
// 地図スクリプトの読み込み
useEffect(() => {
  if (window.google) return; // 既に読み込み済み
  
  const script = document.createElement('script');
  script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}`;
  script.async = true;
  document.head.appendChild(script);
  
  return () => {
    // クリーンアップ
  };
}, []);
```

---

## エラーハンドリング

### 画像読み込みエラー
```typescript
const [imageError, setImageError] = useState(false);

<Image
  onError={() => setImageError(true)}
  // imageError=trueの場合は非表示
  style={{ display: imageError ? 'none' : 'block' }}
/>
```

### Google Maps APIキー未設定
```typescript
if (!apiKey) {
  return (
    <div className="text-center text-gray-500">
      Google Maps APIキーが設定されていません
    </div>
  );
}
```

### 位置情報がないスポット
```typescript
const spotsWithLocation = spots.filter(spot => 
  spot.location?.lat && spot.location?.lng
);

if (spotsWithLocation.length === 0) {
  return <div>位置情報のあるスポットがありません</div>;
}
```

---

## ベストプラクティス

### ✅ DO
- グラデーション背景で統一感を出す
- Next.js Image コンポーネントで画像最適化
- エラーハンドリングを徹底
- ホバーエフェクトで編集可能箇所を明示
- 折りたたみで情報量を調整
- Google Maps はオプショナル機能として扱う

### ❌ DON'T
- 直接 `<img>` タグを使用しない
- エラー時に何も表示しない
- Google Maps APIキーがないとアプリが動かないような実装
- 大量のスポットを一度に表示して重くする
- 編集状態をグローバルに保存しない

---

## テスト方法

### 基本表示
1. モックデータを読み込む
2. すべてのコンポーネントが表示される
3. 画像が正しく表示される

### 編集機能
1. 編集ボタンをクリック
2. EditSpotModal が開く
3. フィールドを編集
4. 保存 → 反映確認

### 地図機能
1. APIキーが設定済みか確認
2. 地図ボタンをクリック
3. マーカーが表示される
4. マーカークリック → 情報ウィンドウ
5. 日別フィルタを変更

---

## 今後の拡張予定

### Phase 5.2（一時保存機能）
- LocalStorage連携
- 自動保存（5分ごと）
- しおり一覧表示

### Phase 5.3（PDF出力）
- PDF生成ライブラリ統合
- しおりレイアウト設計
- 印刷最適化

### Phase 7（UI最適化）
- モバイル対応
- リサイザー機能
- アニメーション強化

---

**詳細ドキュメント**:
- [PHASE5.1_IMPLEMENTATION.md](mdc:docs/PHASE5.1_IMPLEMENTATION.md) - 実装完了レポート
- [PHASE5.1_USAGE.md](mdc:docs/PHASE5.1_USAGE.md) - 機能確認ガイド
