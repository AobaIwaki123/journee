---
globs: "lib/store/**/*,components/**/*"
---

# Zustand状態管理パターン

## ストア構造

### グローバルストア
すべての状態管理は [useStore.ts](mdc:lib/store/useStore.ts) に集約。

### ステート分類
1. **チャット状態**: メッセージ・ローディング
2. **しおり状態**: 現在のしおりデータ
3. **UI状態**: AIモデル選択など

## ストア定義パターン

### インターフェース
```typescript
interface AppState {
  // ステート
  messages: Message[];
  isLoading: boolean;
  
  // アクション（メソッド）
  addMessage: (message: Message) => void;
  setLoading: (loading: boolean) => void;
}
```

### ストア作成
```typescript
export const useStore = create<AppState>((set) => ({
  // 初期値
  messages: [],
  isLoading: false,
  
  // アクション実装
  addMessage: (message) =>
    set((state) => ({ messages: [...state.messages, message] })),
  setLoading: (loading) => set({ isLoading: loading }),
}));
```

## コンポーネントでの使用

### ステート取得
```typescript
// ✅ Good - 必要な部分のみ取得
const { messages, isLoading } = useStore();

// ✅ Good - アクションのみ
const addMessage = useStore((state) => state.addMessage);

// ❌ Bad - 全体を取得
const store = useStore();
```

### パフォーマンス最適化
```typescript
// ✅ Good - セレクタ使用（再レンダリング最小化）
const messageCount = useStore((state) => state.messages.length);

// ❌ Bad - 全体取得（messagesが変わるたびに再レンダリング）
const { messages } = useStore();
const messageCount = messages.length;
```

## アクションパターン

### 単純な更新
```typescript
setLoading: (loading) => set({ isLoading: loading })
```

### 配列への追加
```typescript
addMessage: (message) =>
  set((state) => ({ 
    messages: [...state.messages, message] 
  }))
```

### オブジェクト更新
```typescript
updateItinerary: (updates) =>
  set((state) => ({
    currentItinerary: state.currentItinerary
      ? { ...state.currentItinerary, ...updates }
      : null,
  }))
```

### クリア・リセット
```typescript
clearMessages: () => set({ messages: [] })
```

### 複数ステート同時更新
```typescript
resetChat: () => set({ 
  messages: [], 
  isLoading: false 
})
```

## 非同期処理

### パターン1: コンポーネント内でasync/await
```typescript
// コンポーネント内
const { addMessage, setLoading } = useStore();

const handleSend = async (content: string) => {
  setLoading(true);
  
  // ユーザーメッセージ追加
  addMessage({
    id: generateId(),
    role: 'user',
    content,
    timestamp: new Date(),
  });
  
  try {
    // API呼び出し
    const response = await fetch('/api/chat', {
      method: 'POST',
      body: JSON.stringify({ content }),
    });
    const data = await response.json();
    
    // AI応答追加
    addMessage({
      id: generateId(),
      role: 'assistant',
      content: data.message,
      timestamp: new Date(),
    });
  } catch (error) {
    console.error('Error:', error);
  } finally {
    setLoading(false);
  }
};
```

### パターン2: ストアにasyncアクション（Phase 3以降）
```typescript
// useStore.ts
interface AppState {
  // ...
  sendMessage: (content: string) => Promise<void>;
}

export const useStore = create<AppState>((set, get) => ({
  // ...
  sendMessage: async (content) => {
    set({ isLoading: true });
    
    try {
      // API呼び出し
      const response = await fetch('/api/chat', {
        method: 'POST',
        body: JSON.stringify({ content }),
      });
      const data = await response.json();
      
      // ステート更新
      set((state) => ({
        messages: [
          ...state.messages,
          { id: generateId(), role: 'user', content, timestamp: new Date() },
          { id: generateId(), role: 'assistant', content: data.message, timestamp: new Date() },
        ],
      }));
    } catch (error) {
      console.error('Error:', error);
    } finally {
      set({ isLoading: false });
    }
  },
}));
```

## ローカルストレージ連携（Phase 4以降）

### 永続化
```typescript
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export const useStore = create<AppState>()(
  persist(
    (set) => ({
      // ストア定義
    }),
    {
      name: 'journee-storage',
      // 永続化したいキーを指定
      partialize: (state) => ({
        selectedAI: state.selectedAI,
      }),
    }
  )
);
```

## デバッグ

### Redux DevTools（開発時）
```typescript
import { devtools } from 'zustand/middleware';

export const useStore = create<AppState>()(
  devtools(
    (set) => ({
      // ストア定義
    }),
    { name: 'JourneeStore' }
  )
);
```

## 禁止事項
- ❌ 直接ステートを変更（`state.messages.push()`）
- ❌ 複数のストアに分割（単一ストア原則）
- ❌ useEffect内での無限ループ（依存配列に注意）

## ベストプラクティス
- ✅ イミュータブルな更新（スプレッド構文使用）
- ✅ 型定義を常に明示
- ✅ アクション名は動詞で始める（add, set, update, clear）
- ✅ 必要な部分のみをコンポーネントで取得
- ✅ セレクタ関数で再レンダリング最適化

## 現在の実装状態（Phase 1完了）
- ✅ 基本ストア構造
- ✅ チャット状態管理
- ✅ しおり状態管理
- ✅ UI状態管理
- 📋 永続化（Phase 4で実装）
- 📋 DevTools統合（開発時のみ、必要に応じて）
