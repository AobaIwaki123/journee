---
alwaysApply: true
description: "State management rules using Zustand"
---
# 状態管理（Zustand）

## 主要な状態

### チャット状態
- `messages`: チャットメッセージ履歴
- `isLoading`: ローディング状態
- `isStreaming`: ストリーミング中の状態
- `streamingMessage`: 現在のストリーミングメッセージ

### しおり状態
- `currentItinerary`: 現在のしおりデータ（`ItineraryData`型）
- `planningPhase`: 現在の計画フェーズ
- `currentDetailingDay`: 詳細化中の日程

### UI状態
- `selectedAI`: 選択中のAIモデル（gemini / claude）
- `error`: エラー状態
- `soundEnabled`: 効果音ON/OFF
- `soundVolume`: 音量設定（0.0 - 1.0）

## 実装ルール

### 1. 状態の分割
- 関連する状態をグループ化
- 適切なスライス分割
- 状態間の依存関係を最小化

### 2. 型安全性
- すべての状態に明示的な型定義
- Union型を活用したフェーズ管理
- 型ガードによる安全な状態チェック

### 3. パフォーマンス
- 必要な状態のみを購読
- メモ化による再レンダリング最適化
- バッチ更新の活用

### 4. 永続化
- LocalStorageによる状態の永続化
- 必要な状態のみを永続化
- マイグレーション戦略の実装

## 使用例

```typescript
// コンポーネントでの使用
const {
  messages,
  isStreaming,
  addMessage,
  appendStreamingMessage
} = useStore();

// 選択的な状態購読
const selectedAI = useStore(state => state.selectedAI);
const setSelectedAI = useStore(state => state.setSelectedAI);
```
