---
alwaysApply: true
description: セキュリティとパフォーマンスに関する実装ルール
---

# セキュリティとパフォーマンス

## セキュリティ

### 認証
- **NextAuth.js**: 安全な認証フローの実装
  - JWT戦略の使用
  - セッション管理の適切な設定
  - HTTPOnly Cookieの使用

### APIキー管理
- クライアント側での暗号化保存
- 環境変数での適切な管理
- APIキーのローテーション対応

### サーバーサイド処理
- AI APIはサーバーサイドからのみ呼び出し
- クライアントサイドでの機密情報の非露出
- 適切なCORS設定

### レート制限
- API呼び出しの制限実装
- バーストリクエストの防止
- IP単位での制限

### 入力値バリデーション
- Zodによる厳格なバリデーション
- サニタイズ処理の実装
- XSS対策の徹底

### セッション管理
- JWT/データベースセッションの適切な管理
- セッションタイムアウトの設定
- セッションの安全な破棄

## パフォーマンス

### ストリーミングレスポンス
- AIレスポンスのリアルタイム表示
- チャンクサイズの最適化
- バッファリング戦略

### 画像最適化
- Next.js Imageコンポーネントの活用
- 遅延読み込みの実装
- WebP形式の使用

### コンポーネント最適化
- React.memoの適切な使用
- useMemo、useCallbackの活用
- 不要な再レンダリングの防止

### PDF生成
- Web Workerでの非同期処理
- バックグラウンド生成
- プログレス表示

### コード分割
- 動的インポートの活用
- ルートベースの分割
- 初期ロードの最適化

## データ保存戦略

### Phase 5-7（モックデータ期間）
- **LocalStorage**
  - ユーザーIDをキーとして保存
  - 定期的な自動保存（5分間隔）
  - データ構造の最適化

### データベース（Phase 8完了）
- **Supabase統合**
  - PostgreSQLデータベース
  - Row Level Security (RLS)
  - LocalStorageからの段階的マイグレーション
  - リアルタイム同期

## UX最適化

### ローディング状態
- Skeletonローダーの使用
- プログレスバーの実装
- スムーズな遷移アニメーション

### エラーハンドリング
- ユーザーフレンドリーなエラーメッセージ
- リカバリーオプションの提供
- エラーログの収集

### オフライン対応
- LocalStorageによるオフライン編集
- 自動同期機能
- オフライン状態の通知

### 自動保存
- 定期的な自動保存
- 保存状態の視覚的フィードバック
- 競合解決メカニズム

### レスポンシブデザイン
- モバイルファーストアプローチ
- 適切なブレークポイント設定
- タッチ操作の最適化
