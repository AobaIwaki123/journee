---
alwaysApply: true
description: Phase 4.9（日程作成処理の並列化）の実装ルール
---

# Phase 4.9: 日程作成処理の並列化

## 実装概要

骨組み作成後の各日程の詳細化を並列処理することで、しおり作成を高速化します。

## コアコンポーネント

### 1. 並列実行エンジン（[lib/execution/sequential-itinerary-builder.ts](mdc:lib/execution/sequential-itinerary-builder.ts)）
```typescript
interface ParallelExecutionConfig {
  maxConcurrency: number;
  retryAttempts: number;
  timeoutMs: number;
}

interface ExecutionResult {
  success: boolean;
  dayNumber: number;
  data?: DaySchedule;
  error?: Error;
}
```

### 2. ストリーミング管理
- [api-client.ts](mdc:lib/utils/api-client.ts): 並列ストリーミング
- [response-cache.ts](mdc:lib/utils/response-cache.ts): レスポンスキャッシュ

### 3. UIコンポーネント
- [PlanningProgress.tsx](mdc:components/itinerary/PlanningProgress.tsx): 並列進捗表示
- [DaySchedule.tsx](mdc:components/itinerary/DaySchedule.tsx): 日程表示

## 実装ルール

### 1. 並列実行制御
- 最大並列数の制限（3-5）
- リトライ戦略の実装
- タイムアウト処理

### 2. ストリーミング管理
- 日ごとの独立ストリーム
- イベントの適切なルーティング
- エラー時の部分的更新

### 3. データ整合性
- 並列更新の競合解決
- 部分失敗時のロールバック
- 状態の一貫性保持

### 4. UI更新
- リアルタイムプログレス表示
- 個別日程の生成状態表示
- エラー状態の視覚化

## コーディング規約

### 1. 非同期処理
- Promise.allSettledの適切な使用
- エラーバウンダリの設定
- キャンセル処理の実装

### 2. パフォーマンス
- メモリ使用量の最適化
- ネットワーク負荷の分散
- キャッシュ戦略の実装

### 3. エラーハンドリング
- 部分的失敗の許容
- リカバリーメカニズム
- ユーザーへの通知

## 注意事項

1. **リソース管理**
   - APIレート制限の遵守
   - メモリ消費の監視
   - コネクション数の制御

2. **データ整合性**
   - 並列更新の競合回避
   - トランザクション的な更新
   - 部分失敗時の処理

3. **UX配慮**
   - 進捗の明確な表示
   - キャンセル機能の提供
   - エラー時の代替手段

## 関連ドキュメント
- [PHASE4_9_PARALLEL_DAY_CREATION.md](mdc:docs/PHASE4_9_PARALLEL_DAY_CREATION.md)
- [PHASE4_9_3_AND_4_9_4_IMPLEMENTATION.md](mdc:docs/PHASE4_9_3_AND_4_9_4_IMPLEMENTATION.md)
- [PHASE4_9_5_AND_4_10_1_IMPLEMENTATION.md](mdc:docs/PHASE4_9_5_AND_4_10_1_IMPLEMENTATION.md)
