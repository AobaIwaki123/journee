---
alwaysApply: true
description: "Implementation rules for Phase 4.8 and 4.9"
---
# Phase 4: 段階的旅程構築システム

## 実装ステータス
- ✅ Phase 4.1-4.5: 基本機能実装完了
- 🔄 Phase 4.6: しおりマージロジック改善（実装中）
- 📋 Phase 4.7: テスト・デバッグ（予定）
- 📋 Phase 4.8: フェーズ移動処理の半自動化（予定）
- 📋 Phase 4.9: 日程作成処理の並列化（予定）

## Phase 4.8: フェーズ移動処理の半自動化

### コアコンポーネント
- [lib/requirements/extractors.ts](mdc:lib/requirements/extractors.ts): 情報抽出システム
- [lib/requirements/checklist-config.ts](mdc:lib/requirements/checklist-config.ts): チェックリスト設定
- [components/itinerary/PhaseStatusBar.tsx](mdc:components/itinerary/PhaseStatusBar.tsx): フェーズ状態表示
- [components/itinerary/PlanningProgress.tsx](mdc:components/itinerary/PlanningProgress.tsx): 進捗表示

### 実装ルール
1. **情報抽出**
   - チャット履歴から必要情報を自動抽出
   - 正規表現とAIベースの抽出を組み合わせ
   - 抽出結果のキャッシュと更新管理

2. **充足度判定**
   - フェーズごとの必須情報を定義
   - 重み付けによる充足度計算
   - 最小要件の設定と確認

3. **UI表示**
   - 充足度に応じたボタンスタイル変更
   - チェックリストのリアルタイム更新
   - 視覚的なフィードバック提供

## Phase 4.9: 日程作成処理の並列化

### コアコンポーネント
- [lib/execution/sequential-itinerary-builder.ts](mdc:lib/execution/sequential-itinerary-builder.ts): 並列実行エンジン
- [lib/utils/api-client.ts](mdc:lib/utils/api-client.ts): 並列ストリーミング
- [lib/utils/response-cache.ts](mdc:lib/utils/response-cache.ts): レスポンスキャッシュ

### 実装ルール
1. **並列実行制御**
   - 最大並列数の制限（3-5）
   - リトライ戦略の実装
   - タイムアウト処理

2. **ストリーミング管理**
   - 日ごとの独立ストリーム
   - イベントの適切なルーティング
   - エラー時の部分的更新

3. **データ整合性**
   - 並列更新の競合解決
   - 部分失敗時のロールバック
   - 状態の一貫性保持
